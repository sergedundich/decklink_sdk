/* -LICENSE-START-
** Copyright (c) 2009 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/
/* DeckLinkAPI.idl */

import "unknwn.idl";

[uuid(D864517A-EDD5-466D-867D-C819F1C052BB),
 version(1.0), helpstring("DeckLink API Library")]
library DeckLinkAPI
{
	typedef BOOL		BMDbool;
	
    /* Video display modes supported for output/input */
    typedef [v1_enum] enum {
        bmdModeNTSC				= 0x6E747363,	// 'ntsc'
        bmdModeNTSC2398			= 0x6E743332,	// 'nt23'
        bmdModePAL				= 0x70616C20,	// 'pal '
        //
        bmdModeHD1080psf2398	= 0x32337073,	// '23ps'
        bmdModeHD1080psf24		= 0x32347073,	// '24ps'
        bmdModeHD1080i50		= 0x48693530,	// 'Hi50'
        bmdModeHD1080i5994		= 0x48693539,	// 'Hi59'
        //
        bmdModeHD720p50			= 0x68703530,	// 'hp50'
        bmdModeHD720p5994		= 0x68703539,	// 'hp59'
        bmdModeHD720p60			= 0x68703630,	// 'hp60'
        //
        bmdMode2k2398			= 0x326B3233,	// '2k23'
        bmdMode2k24				= 0x326B3234	// '2k24'
    } BMDDisplayMode;


    /* Video pixel formats supported for output/input */
    typedef [v1_enum] enum {
        bmdFormat8BitYUV		= 0x32767579,	// '2vuy'
        bmdFormat10BitYUV		= 0x76323130,	// 'v210'
        bmdFormat8BitARGB		= 0x20,
        bmdFormat8BitBGRA		= 0x42475241,	// 'BGRA'
        bmdFormat10BitRGB		= 0x72323130	// 'r210'
    } BMDPixelFormat;

    /* Flags to influence how a video frame is displayed */
    typedef unsigned long	BMDFrameFlags;
    enum {
        bmdFrameFlagDefault			= 0,
		bmdFrameFlagFlipVertical	= 1 << 0,
		//
		// Flags that are valid only for frames returned through IDeckLinkInput
		bmdFrameHasNoInputSource	= 1 << 31
    };

    /* Flags applicable to video input */
    typedef unsigned long	BMDVideoInputModeFlags;
    enum {
        bmdVideoInputFlagDefault	= 0
    };


    /* Frame Completion Callback */

    typedef [v1_enum] enum {
        bmdOutputFrameCompleted,
        bmdOutputFrameDisplayedLate,
        bmdOutputFrameDropped,
        bmdOutputFrameFlushed
    } BMDOutputFrameCompletionResult;
	
	
	/* Audio sample rates supported for output/input */
	
    typedef unsigned long	BMDAudioSampleRate;
    enum {
        bmdAudioSampleRate48kHz			= 48000
    };
	
	
	/* Audio sample sizes supported for output/input */
	
    typedef unsigned long	BMDAudioSampleType;
    enum {
		bmdAudioSampleType16bitInteger		= 16,
		bmdAudioSampleType32bitInteger		= 32
    };

	/* Output mode supported flags */
	typedef [v1_enum] enum {
		bmdDisplayModeNotSupported				= 0,
		bmdDisplayModeSupported,
		bmdDisplayModeSupportedWithConversion
	} BMDDisplayModeSupport;

    /* Frame time types  for scheduling */

    typedef LONGLONG	BMDTimeValue;
    typedef LONGLONG	BMDTimeScale;


    /* Forward Declarations */
    interface IDeckLinkIterator;
	interface IDeckLinkDisplayModeIterator;
	interface IDeckLinkDisplayMode;
    interface IDeckLink;
    interface IDeckLinkVideoFrame;
    interface IDeckLinkVideoInputFrame;
    interface IDeckLinkAudioInputPacket;


    [object, uuid(EBD01AFA-E4B0-49C6-A01D-EDB9D1B55FD9),
     helpstring("IDeckLinkVideoOutputCallback. Frame completion callback.")]
    interface IDeckLinkVideoOutputCallback : IUnknown
    {
        HRESULT		ScheduledFrameCompleted ([in] IDeckLinkVideoFrame* completedFrame, [in] BMDOutputFrameCompletionResult result);
    };

    [object, uuid(7F94F328-5ED4-4E9F-9729-76A86BDC99CC),
     helpstring("IDeckLinkInputCallback. Frame arrival callback.")]
    interface IDeckLinkInputCallback : IUnknown
    {
        HRESULT		VideoInputFrameArrived ([in] IDeckLinkVideoInputFrame* videoFrame, [in] IDeckLinkAudioInputPacket* audioPacket);
    };

    [object, uuid(B36EB6E7-9D29-4AA8-92EF-843B87A289E8), local,
     helpstring("IDeckLinkMemoryAllocator. Memory allocator for video frames.")]
    interface IDeckLinkMemoryAllocator : IUnknown
    {
		HRESULT			AllocateBuffer (unsigned long bufferSize, void* *allocatedBuffer);
		HRESULT			ReleaseBuffer (void* buffer);
		
		HRESULT			Commit ();
		HRESULT			Decommit ();
    };
	
	[object, uuid(403C681B-7F46-4A12-B993-2BB127084EE6), local,
     helpstring("IDeckLinkAudioOutputCallback. Optional aallback to allow audio samples to be pulled as required.")]
    interface IDeckLinkAudioOutputCallback : IUnknown
    {
		HRESULT			RenderAudioSamples (BMDbool preroll);
    };
	
	
	
    [object, uuid(74E936FC-CC28-4A67-81A0-1E94E52D4E69),
     helpstring("IDeckLinkIterator enumerates installed DeckLink hardware")]
    interface IDeckLinkIterator : IUnknown
    {
        HRESULT		Next ([out] IDeckLink** deckLinkInstance);
    };


	[object, uuid(B28131B6-59AC-4857-B5AC-CD75D5883E2F),
	 helpstring("IDeckLinkDisplayModeIterator enumerates over supported input/output display modes.")]
	interface IDeckLinkDisplayModeIterator : IUnknown
	{
		HRESULT		Next ([out] IDeckLinkDisplayMode** deckLinkDisplayMode);
	};


	[object, uuid(AF0CD6D5-8376-435e-8433-54F9DD530AC3),
	 helpstring("IDeckLinkDisplayMode represents a display mode")]
	interface IDeckLinkDisplayMode : IUnknown
	{
		HRESULT			GetName ([out] BSTR* name);
		BMDDisplayMode	GetDisplayMode ();
		long			GetWidth ();
		long			GetHeight ();
		HRESULT			GetFrameRate (BMDTimeValue *frameDuration, BMDTimeScale *timeScale);
	};


    [object, uuid(62BFF75D-6569-4E55-8D4D-66AA03829ABC),
     helpstring("IDeckLink represents a DeckLink device")]
    interface IDeckLink : IUnknown
    {
        HRESULT		GetModelName ([out] BSTR* modelName);
    };


    [object, uuid(AE5B3E9B-4E1E-4535-B6E8-480FF52F6CE5), local,
     helpstring("IDeckLinkOutput.  Created by QueryInterface from IDeckLink.")]
    interface IDeckLinkOutput : IUnknown
    {
		HRESULT		DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, [out] BMDDisplayModeSupport *result);
		HRESULT		GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator **iterator);
		
		// Video output
        HRESULT		EnableVideoOutput (BMDDisplayMode displayMode);
        HRESULT		DisableVideoOutput ();
		
		HRESULT		SetVideoOutputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);
        HRESULT		CreateVideoFrame (long width, long height, long rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame** outFrame);
        HRESULT		CreateVideoFrameFromBuffer (void* buffer, long width, long height, long rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame** outFrame);

        HRESULT		DisplayVideoFrameSync (IDeckLinkVideoFrame* theFrame);
        HRESULT		ScheduleVideoFrame (IDeckLinkVideoFrame* theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale);
        HRESULT		SetScheduledFrameCompletionCallback ([in] IDeckLinkVideoOutputCallback* theCallback);
		
		// Audio output
		HRESULT		EnableAudioOutput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, unsigned long channelCount);
		HRESULT		DisableAudioOutput ();
		
		HRESULT		WriteAudioSamplesSync (void* buffer, unsigned long sampleFrameCount, [out] unsigned long *sampleFramesWritten);
		
		HRESULT		BeginAudioPreroll ();
		HRESULT		EndAudioPreroll ();
		HRESULT		ScheduleAudioSamples (void* buffer, unsigned long sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, [out] unsigned long *sampleFramesWritten);
		
		HRESULT		GetBufferedAudioSampleFrameCount ( [out] unsigned long *bufferedSampleCount);
		HRESULT		FlushBufferedAudioSamples ();
		
		HRESULT		SetAudioCallback ( [in] IDeckLinkAudioOutputCallback* theCallback);
		
		// Output control
        HRESULT		StartScheduledPlayback (BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed);
        HRESULT		StopScheduledPlayback (BMDTimeValue stopPlaybackAtTime, BMDTimeValue *actualStopTime, BMDTimeScale timeScale);
        HRESULT		GetHardwareReferenceClock (BMDTimeScale desiredTimeScale, BMDTimeValue *elapsedTimeSinceSchedulerBegan);
    };


    [object, uuid(2B54EDEF-5B32-429F-BA11-BB990596EACD),
     helpstring("IDeckLinkInput.  Created by QueryInterface from IDeckLink.")]
    interface IDeckLinkInput : IUnknown
    {
		HRESULT		DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, [out] BMDDisplayModeSupport *result);
		HRESULT		GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator **iterator);
		
		// Video input
		HRESULT		EnableVideoInput (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputModeFlags flags);
		HRESULT		DisableVideoInput ();
		
		// Audio input
		HRESULT		EnableAudioInput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, unsigned long channelCount);
		HRESULT		DisableAudioInput ();
		HRESULT		ReadAudioSamples (void* buffer, unsigned long sampleFrameCount, [out] unsigned long *sampleFramesRead, [out] BMDTimeValue *audioPacketTime, BMDTimeScale timeScale);
		HRESULT		GetBufferedAudioSampleFrameCount ( [out] unsigned long *bufferedSampleCount);
		
		// Input control
		HRESULT		StartStreams ();
		HRESULT		StopStreams ();
		HRESULT		PauseStreams ();
		HRESULT		SetCallback ([in] IDeckLinkInputCallback* theCallback);
    };


    [object, uuid(333F3A10-8C2D-43CF-B79D-46560FEEA1CE), local,
     helpstring("IDeckLinkVideoFrame.  Created by IDeckLinkVideoOutput::CreateVideoFrame.")]
    interface IDeckLinkVideoFrame : IUnknown
    {
        long				GetWidth ();
        long				GetHeight ();
        long				GetRowBytes ();
        BMDPixelFormat		GetPixelFormat ();
        BMDFrameFlags		GetFlags ();
        HRESULT				GetBytes (void* *buffer);
    };


    [object, uuid(C8B41D95-8848-40EE-9B37-6E3417FB114B), local,
     helpstring("IDeckLinkVideoInputFrame.  Provided by the IDeckLinkVideoInput frame arrival callback.")]
    interface IDeckLinkVideoInputFrame : IDeckLinkVideoFrame
    {
        HRESULT				GetFrameTime (BMDTimeValue *frameTime, BMDTimeValue *frameDuration, BMDTimeScale timeScale);
    };
	
	
	[object, uuid(C86DE4F6-A29F-42E3-AB3A-1363E29F0788), local,
     helpstring("IDeckLinkAudioInputPacket.  Provided by the IDeckLinkInput callback.")]
    interface IDeckLinkAudioInputPacket : IUnknown
    {
		long				GetSampleCount ();
		HRESULT				GetBytes (void* *buffer);
		HRESULT				GetAudioPacketTime (BMDTimeValue *packetTime, BMDTimeScale timeScale);
    };


    /*******************************************************************************************************************
     ************************************************* DeckLink Configuration ******************************************
     *******************************************************************************************************************/

    typedef [v1_enum] enum {
        bmdVideoConnectionSDI		= 0x73646920,	// 'sdi '
        bmdVideoConnectionHDMI		= 0x68646D69,	// 'hdmi'
        bmdVideoConnectionComponent	= 0x63706E74,	// 'cpnt'
        bmdVideoConnectionComposite	= 0x636D7374,	// 'cmst'
        bmdVideoConnectionSVideo	= 0x73766964	// 'svid'
    } BMDVideoConnection;

    typedef unsigned long	BMDAnalogVideoFlags;
    enum {
        bmdAnalogVideoFlagCompositeSetup75			= 1 << 0,
        bmdAnalogVideoFlagComponentBetacamLevels	= 1 << 1
    };

    typedef [v1_enum] enum {
        bmdAudioConnectionEmbedded	= 0x656D6264,	// 'embd'
        bmdAudioConnectionAESEBU	= 0x61657320,	// 'aes '
        bmdAudioConnectionAnalog	= 0x616E6C67	// 'anlg'
    } BMDAudioConnection;

    typedef [v1_enum] enum {
        bmdNoVideoOutputConversion							= 0x6E6F6E65,	// 'none'
        bmdVideoOutputLetterboxDownonversion				= 0x6C746278,	// 'ltbx'
        bmdVideoOutputAnamorphicDownonversion				= 0x616D7068,	// 'amph'
        bmdVideoOutputHD720toHD1080Conversion				= 0x37323063,	// '720c'
        bmdVideoOutputHardwareLetterboxDownconversion		= 0x48576C62,	// 'HWlb'
        bmdVideoOutputHardwareAnamorphicDownconversion		= 0x4857616D,	// 'HWam'
        bmdVideoOutputHardwareCenterCutDownconversion		= 0x48576363	// 'HWcc'
    } BMDVideoOutputConversionMode;

    typedef [v1_enum] enum {
        bmdNoVideoInputConversion							= 0x6E6F6E65,	// 'none'
        bmdVideoInputLetterboxDownconversionFromHD1080		= 0x31306C62,	// '10lb'
        bmdVideoInputAnamorphicDownconversionFromHD1080		= 0x3130616D,	// '10am'
        bmdVideoInputLetterboxDownconversionFromHD720		= 0x37326C62,	// '72lb'
        bmdVideoInputAnamorphicDownconversionFromHD720		= 0x3732616D,	// '72am'
        bmdVideoInputLetterboxUpconversion					= 0x6C627570,	// 'lbup'
        bmdVideoInputAnamorphicUpconversion					= 0x616D7570	// 'amup'
	} BMDVideoInputConversionMode;
	
	
	
	
    [object, uuid(B8EAD569-B764-47F0-A73F-AE40DF6CBF10),
     helpstring("IDeckLinkConfiguration.  Created by QueryInterface from IDeckLink.")]
    interface IDeckLinkConfiguration : IUnknown
    {
        HRESULT		GetConfigurationValidator (IDeckLinkConfiguration** configObject);
        HRESULT		WriteConfigurationToPreferences ();

        // Video output configuration
        HRESULT		SetVideoOutputFormat (BMDVideoConnection videoOutputConnection);
        HRESULT		IsVideoOutputActive (BMDVideoConnection videoOutputConnection, BMDbool *active);

        HRESULT		SetAnalogVideoOutputFlags (BMDAnalogVideoFlags analogVideoFlags);
        HRESULT		GetAnalogVideoOutputFlags (BMDAnalogVideoFlags *analogVideoFlags);

        HRESULT		EnableFieldFlickerRemovalWhenPaused (BMDbool enable);
        HRESULT		IsEnabledFieldFlickerRemovalWhenPaused (BMDbool *enabled);

        HRESULT		SetDualLinkVideoOutput (BMDbool enableDualLinkOutput, BMDbool enable3GbsOutput);
        HRESULT		GetDualLinkVideoOutput (BMDbool *dualLinkOutputEnabled, BMDbool *threeGbsOutputEnabled);

        HRESULT		SetVideoOutputConversionMode (BMDVideoOutputConversionMode conversionMode);
        HRESULT		GetVideoOutputConversionMode (BMDVideoOutputConversionMode *conversionMode);

        HRESULT		Set_HD1080p24_to_HD1080i5994_Conversion (BMDbool enable);
        HRESULT		Get_HD1080p24_to_HD1080i5994_Conversion (BMDbool *enabled);

        // Video input configuration
        HRESULT		SetVideoInputFormat (BMDVideoConnection videoInputFormat);
        HRESULT		GetVideoInputFormat (BMDVideoConnection *videoInputFormat);

        HRESULT		SetAnalogVideoInputFlags (BMDAnalogVideoFlags analogVideoFlags);
        HRESULT		GetAnalogVideoInputFlags (BMDAnalogVideoFlags *analogVideoFlags);

        HRESULT		SetVideoInputConversionMode (BMDVideoInputConversionMode conversionMode);
        HRESULT		GetVideoInputConversionMode (BMDVideoInputConversionMode *conversionMode);

        HRESULT		SetBlackVideoOutputDuringCapture (BMDbool blackOutInCapture);
        HRESULT		GetBlackVideoOutputDuringCapture (BMDbool *blackOutInCapture);

        HRESULT		Set32PulldownSequenceInitialTimecodeFrame (unsigned long aFrameTimecode);
        HRESULT		Get32PulldownSequenceInitialTimecodeFrame (unsigned long *aFrameTimecode);

        HRESULT		SetVancSourceLineMapping (unsigned long activeLine1VANCsource, unsigned long activeLine2VANCsource, unsigned long activeLine3VANCsource);
        HRESULT		GetVancSourceLineMapping (unsigned long *activeLine1VANCsource, unsigned long *activeLine2VANCsource, unsigned long *activeLine3VANCsource);

        // Audio input configuration
        HRESULT		SetAudioInputFormat (BMDAudioConnection audioInputFormat);
        HRESULT		GetAudioInputFormat (BMDAudioConnection *audioInputFormat);
    };

	importlib("stdole2.tlb");

	interface IDeckLinkIterator;
	interface IDeckLink;

	// CDeckLinkIterator
	[
     uuid(D9EDA3B3-2887-41FA-B724-017CF1EB1D37),
     helpstring("CDeckLinkIterator Class")
     ]
	coclass CDeckLinkIterator
	{
		[default] interface IDeckLinkIterator;
	};
};
