/* -LICENSE-START-
** Copyright (c) 2009 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/
/* DeckLinkAPI.h */

#ifndef __DeckLink_API_h__
#define __DeckLink_API_h__

#include <stdint.h>
#include "LinuxCOM.h"

// Interface UUIDs
// ===============

// "74E936FC-CC28-4A67-81A0-1E94E52D4E69"
#define IID_IDeckLinkIterator				(REFIID){0x74,0xE9,0x36,0xFC,0xCC,0x28,0x4A,0x67,0x81,0xA0,0x1E,0x94,0xE5,0x2D,0x4E,0x69}

// "B28131B6-59AC-4857-B5AC-CD75D5883E2F"
#define IID_IDeckLinkDisplayModeIterator	(REFIID){0xB2,0x81,0x31,0xB6,0x59,0xAC,0x48,0x57,0xB5,0xAC,0xCD,0x75,0xD5,0x88,0x3E,0x2F}

// "AF0CD6D5-8376-435E-8433-54F9DD530AC3"
#define IID_IDeckLinkDisplayMode			(REFIID){0xAF,0x0C,0xD6,0xD5,0x83,0x76,0x43,0x5E,0x84,0x33,0x54,0xF9,0xDD,0x53,0x0A,0xC3}

// "62BFF75D-6569-4E55-8D4D-66AA03829ABC"
#define IID_IDeckLink						(REFIID){0x62,0xBF,0xF7,0x5D,0x65,0x69,0x4E,0x55,0x8D,0x4D,0x66,0xAA,0x03,0x82,0x9A,0xBC}

// "4973F012-9925-458C-871C-18774CDBBECB"
#define IID_IDeckLinkInput					(REFIID){0x49,0x73,0xF0,0x12,0x99,0x25,0x45,0x8C,0x87,0x1C,0x18,0x77,0x4C,0xDB,0xBE,0xCB}

// "EA7EB6D0-2893-11DE-8C30-0800200C9A66"
#define IID_IDeckLinkOutput					(REFIID){0xEA,0x7E,0xB6,0xD0,0x28,0x93,0x11,0xDE,0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66}

// "333F3A10-8C2D-43CF-B79D-46560FEEA1CE"
#define IID_IDeckLinkVideoFrame				(REFIID){0x33,0x3F,0x3A,0x10,0x8C,0x2D,0x43,0xCF,0xB7,0x9D,0x46,0x56,0x0F,0xEE,0xA1,0xCE}

// "CF317790-2894-11DE-8C30-0800200C9A66"
#define IID_IDeckLinkVideoInputFrame		(REFIID){0xCF,0x31,0x77,0x90,0x28,0x94,0x11,0xDE,0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66}

// "732E723C-D1A4-4E29-9E8E-4A88797A0004"
#define IID_IDeckLinkVideoFrameAncillary	(REFIID){0x73,0x2E,0x72,0x3C,0xD1,0xA4,0x4E,0x29,0x9E,0x8E,0x4A,0x88,0x79,0x7A,0x00,0x04}

// "EFB9BCA6-A521-44F7-BD69-2332F24D9EE6"
#define IID_IDeckLinkTimecode				(REFIID){0xEF,0xB9,0xBC,0xA6,0xA5,0x21,0x44,0xF7,0xBD,0x69,0x23,0x32,0xF2,0x4D,0x9E,0xE6}

// "E43D5870-2894-11DE-8C30-0800200C9A66"
#define IID_IDeckLinkAudioInputPacket		(REFIID){0xE4,0x3D,0x58,0x70,0x28,0x94,0x11,0xDE,0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66}

// "B8EAD569-B764-47F0-A73F-AE40DF6CBF10"
#define IID_IDeckLinkConfiguration			(REFIID){0xB8,0xEA,0xD5,0x69,0xB7,0x64,0x47,0xF0,0xA7,0x3F,0xAE,0x40,0xDF,0x6C,0xBF,0x10}

// Callbacks

// "EBD01AFA-E4B0-49C6-A01D-EDB9D1B55FD9"
#define IID_IDeckLinkVideoOutputCallback	(REFIID){0xEB,0xD0,0x1A,0xFA,0xE4,0xB0,0x49,0xC6,0xA0,0x1D,0xED,0xB9,0xD1,0xB5,0x5F,0xD9}

// "403C681B-7F46-4A12-B993-2BB127084EE6"
#define IID_IDeckLinkAudioOutputCallback	(REFIID){0x40,0x3C,0x68,0x1B,0x7F,0x46,0x4A,0x12,0xB9,0x93,0x2B,0xB1,0x27,0x08,0x4E,0xE6}

// "FD6F311D-4D00-444B-9ED4-1F25B5730AD0"
#define IID_IDeckLinkInputCallback			(REFIID){0xFD,0x6F,0x31,0x1D,0x4d,0x00,0x44,0x4b,0x9e,0xd4,0x1F,0x25,0xB5,0x73,0x0A,0xD0}

// "B36EB6E7-9D29-4AA8-92EF-843B87A289E8"
#define IID_IDeckLinkMemoryAllocator		(REFIID){0xB3,0x6E,0xB6,0xE7,0x9D,0x29,0x4A,0xA8,0x92,0xEF,0x84,0x3B,0x87,0xA2,0x89,0xE8}

// "373F499D-4B4D-4518-AD22-6354E5A5825E"
#define IID_IDeckLinkScreenPreviewCallback	(REFIID){0x37,0x3F,0x49,0x9D,0x4B,0x4D,0x45,0x18,0xAD,0x22,0x63,0x54,0xE5,0xA5,0x82,0x5E}

// "BA575CD9-A15E-497B-B2C2-F9AFE7BE4EBA"
#define IID_IDeckLinkGLScreenPreviewHelper	(REFIID){0xBA,0x57,0x5C,0xD9,0xA1,0x5E,0x49,0x7B,0xB2,0xC2,0xF9,0xAF,0xE7,0xBE,0x4E,0xBA}


/* Video display modes supported for output/input */
typedef uint32_t	BMDDisplayMode;
enum {
	bmdModeNTSC				= 'ntsc',
	bmdModeNTSC2398			= 'nt23',
	bmdModePAL				= 'pal ',
	//
	bmdModeHD1080p2398		= '23ps',
	bmdModeHD1080p24		= '24ps',
	bmdModeHD1080i50		= 'Hi50',
	bmdModeHD1080i5994		= 'Hi59',
	//
	bmdModeHD720p50			= 'hp50',
	bmdModeHD720p5994		= 'hp59',
	bmdModeHD720p60			= 'hp60',
	//
	bmdMode2k2398			= '2k23',
	bmdMode2k24				= '2k24'
};


/* Video pixel formats supported for output/input */
typedef uint32_t	BMDPixelFormat;
enum {
	bmdFormat8BitYUV		= '2vuy',
	bmdFormat10BitYUV		= 'v210',
	bmdFormat8BitARGB		= 0x20,
	bmdFormat8BitBGRA		= 'BGRA',
	bmdFormat10BitRGB		= 'r210'
};

/* Display mode supported flags */
typedef uint32_t	BMDDisplayModeSupport;
enum {
	bmdDisplayModeNotSupported				= 0,
	bmdDisplayModeSupported,
	bmdDisplayModeSupportedWithConversion
};

/* Flags to influence how a video frame is displayed */
typedef uint32_t	BMDFrameFlags;
enum {
	bmdFrameFlagDefault				= 0,
	bmdFrameFlagFlipVertical		= 1 << 0,
	//
	// Flags that are valid only for frames returned through IDeckLinkInput
	bmdFrameHasNoInputSource		= 1 << 31
};

/* Flags applicable to video input */
typedef uint32_t	BMDVideoInputFlags;
enum {
	bmdVideoInputFlagDefault				= 0,
	bmdVideoInputEnableFormatDetection		= 1 << 0
};


/* Frame Completion Callback */

typedef uint32_t	BMDOutputFrameCompletionResult;
enum {
	bmdOutputFrameCompleted,
	bmdOutputFrameDisplayedLate,
	bmdOutputFrameDropped,
	bmdOutputFrameFlushed
};


/* Audio sample rates supported for output/input */
typedef uint32_t	BMDAudioSampleRate;
enum {
	bmdAudioSampleRate48kHz		= 48000
};


/* Audio sample sizes supported for output/input */
typedef uint32_t	BMDAudioSampleType;
enum {
	bmdAudioSampleType16bitInteger		= 16,
	bmdAudioSampleType32bitInteger		= 32
};


/* Audio output stream type */
typedef uint32_t	BMDAudioOutputStreamType;
enum {
	bmdAudioOutputStreamContinuous,
	bmdAudioOutputStreamContinuousDontResample,
	bmdAudioOutputStreamTimestamped
};


/* Frame time types  for scheduling */

typedef int64_t	BMDTimeValue;
typedef int64_t	BMDTimeScale;


#if defined(__cplusplus)

/* Forward Declarations */ 
class IDeckLinkIterator;
class IDeckLinkDisplayModeIterator;
class IDeckLinkDisplayMode;
class IDeckLink;
class IDeckLinkVideoFrame;
class IDeckLinkVideoInputFrame;
class IDeckLinkAudioInputPacket;
class IDeckLinkScreenPreviewCallback;


/*******************************************************************************************************************
 ************************************* Callback Interfaces (implemented by the caller) *****************************
 *******************************************************************************************************************/

class IDeckLinkVideoOutputCallback : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE	ScheduledFrameCompleted (IDeckLinkVideoFrame* completedFrame, BMDOutputFrameCompletionResult result) = 0;
};

class IDeckLinkInputCallback : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE	VideoInputFormatChanged (IDeckLinkDisplayMode* newDisplayMode) = 0;
	virtual HRESULT STDMETHODCALLTYPE	VideoInputFrameArrived (IDeckLinkVideoInputFrame* videoFrame, IDeckLinkAudioInputPacket* audioPacket) = 0;

	virtual								~IDeckLinkInputCallback () {}
};

class IDeckLinkMemoryAllocator : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE	AllocateBuffer (uint32_t bufferSize, void* *allocatedBuffer) = 0;
	virtual HRESULT STDMETHODCALLTYPE	ReleaseBuffer (void* buffer) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	Commit () = 0;
	virtual HRESULT STDMETHODCALLTYPE	Decommit () = 0;
};

class IDeckLinkAudioOutputCallback : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE	RenderAudioSamples (bool preroll) = 0;
};


/*******************************************************************************************************************
 ************************************************ DeckLink Device Discovery ****************************************
 *******************************************************************************************************************/

class IDeckLinkIterator : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE	Next (IDeckLink* *deckLinkInstance) = 0;
};


class IDeckLinkDisplayModeIterator : public IUnknown
{
public:
	virtual	HRESULT	STDMETHODCALLTYPE	Next (IDeckLinkDisplayMode* *deckLinkDisplayMode) = 0;
};


class IDeckLinkDisplayMode : public IUnknown
{
public:
	virtual	HRESULT			STDMETHODCALLTYPE	GetName (const char **name) = 0;
	virtual	BMDDisplayMode	STDMETHODCALLTYPE	GetDisplayMode () = 0;
	virtual	long			STDMETHODCALLTYPE	GetWidth () = 0;
	virtual	long			STDMETHODCALLTYPE	GetHeight () = 0;
	virtual	HRESULT			STDMETHODCALLTYPE	GetFrameRate (BMDTimeValue *frameDuration, BMDTimeScale *timeScale) = 0;
};


class IDeckLink : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE	GetModelName (const char **modelName) = 0;
};


/*******************************************************************************************************************
 ***************************************************** DeckLink Video **********************************************
 *******************************************************************************************************************/

// IDeckLinkOutput.  Created by QueryInterface from IDeckLink.
class IDeckLinkOutput : public IUnknown
{
public:
	// Display mode predicates
	virtual	HRESULT	STDMETHODCALLTYPE	DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDDisplayModeSupport *result) = 0;
	virtual HRESULT	STDMETHODCALLTYPE	GetDisplayModeIterator (IDeckLinkDisplayModeIterator* *iterator) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetScreenPreviewCallback (IDeckLinkScreenPreviewCallback* previewCallback) = 0;
	
	// Video output
	virtual HRESULT STDMETHODCALLTYPE	EnableVideoOutput (BMDDisplayMode displayMode) = 0;
	virtual HRESULT STDMETHODCALLTYPE	DisableVideoOutput () = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetVideoOutputFrameMemoryAllocator (IDeckLinkMemoryAllocator* theAllocator) = 0;
	virtual HRESULT STDMETHODCALLTYPE	CreateVideoFrame (int32_t width, int32_t height, int32_t rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame* *outFrame) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	DisplayVideoFrameSync (IDeckLinkVideoFrame* theFrame) = 0;
	virtual HRESULT STDMETHODCALLTYPE	ScheduleVideoFrame (IDeckLinkVideoFrame* theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale) = 0;
	virtual HRESULT STDMETHODCALLTYPE	SetScheduledFrameCompletionCallback (IDeckLinkVideoOutputCallback* theCallback) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetBufferedVideoFrameCount (uint32_t *bufferedFrameCount) = 0;
	
	// Audio output
	virtual HRESULT STDMETHODCALLTYPE	EnableAudioOutput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount, BMDAudioOutputStreamType streamType) = 0;
	virtual HRESULT STDMETHODCALLTYPE	DisableAudioOutput () = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	WriteAudioSamplesSync (void* buffer, uint32_t sampleFrameCount, uint32_t *sampleFramesWritten) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	BeginAudioPreroll () = 0;
	virtual HRESULT STDMETHODCALLTYPE	EndAudioPreroll () = 0;
	virtual HRESULT STDMETHODCALLTYPE	ScheduleAudioSamples (void* buffer, uint32_t sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, uint32_t *sampleFramesWritten) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	GetBufferedAudioSampleFrameCount (uint32_t *bufferedSampleFrameCount) = 0;
	virtual HRESULT STDMETHODCALLTYPE	FlushBufferedAudioSamples () = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetAudioCallback (IDeckLinkAudioOutputCallback* theCallback) = 0;
	
	
	// Output control
	virtual HRESULT STDMETHODCALLTYPE	StartScheduledPlayback (BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed) = 0;
	virtual HRESULT STDMETHODCALLTYPE	StopScheduledPlayback (BMDTimeValue stopPlaybackAtTime, BMDTimeValue *actualStopTime, BMDTimeScale timeScale) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetHardwareReferenceClock (BMDTimeScale desiredTimeScale, BMDTimeValue *elapsedTimeSinceSchedulerBegan) = 0;
	
	virtual								~IDeckLinkOutput () {}
};


// IDeckLinkInput.  Created by QueryInterface from IDeckLink.
class IDeckLinkInput : public IUnknown
{
public:
	virtual	HRESULT	STDMETHODCALLTYPE	DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDDisplayModeSupport *result) = 0;
	virtual HRESULT	STDMETHODCALLTYPE	GetDisplayModeIterator (IDeckLinkDisplayModeIterator **iterator) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetScreenPreviewCallback (IDeckLinkScreenPreviewCallback* previewCallback) = 0;
	
	// Video input
	virtual HRESULT STDMETHODCALLTYPE	EnableVideoInput (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputFlags flags) = 0;
	virtual HRESULT STDMETHODCALLTYPE	DisableVideoInput () = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetAvailableVideoFrameCount (uint32_t *availableFrameCount) = 0;
	
	// Audio input
	virtual HRESULT STDMETHODCALLTYPE	EnableAudioInput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount) = 0;
	virtual HRESULT STDMETHODCALLTYPE	DisableAudioInput () = 0;
	virtual HRESULT STDMETHODCALLTYPE	ReadAudioSamples (void* buffer, uint32_t sampleFrameCount, uint32_t *sampleFramesRead, BMDTimeValue *audioPacketTime, BMDTimeScale timeScale) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetAvailableAudioSampleFrameCount (uint32_t *availableSampleFrameCount) = 0;
	
	// Input control
	virtual HRESULT	STDMETHODCALLTYPE	StartStreams () = 0;
	virtual HRESULT	STDMETHODCALLTYPE	StopStreams () = 0;
	virtual HRESULT	STDMETHODCALLTYPE	PauseStreams () = 0;
	virtual HRESULT	STDMETHODCALLTYPE	FlushStreams () = 0;

	virtual HRESULT STDMETHODCALLTYPE	SetCallback (IDeckLinkInputCallback* theCallback) = 0;

	virtual								~IDeckLinkInput () {}
};


/* Timecode formats for frame metadata */
typedef uint32_t	BMDTimecodeFormat;
enum {
	bmdTimecodeRP188		= 'rp18',		// SMPTE RP-188 embedded timecode
	bmdTimecodeVITC			= 'vitc',		// Vertical Interval Time Code
	bmdTimecodeSerial		= 'seri'		// RS-422 serial interface timecode
};

/* Timecode flags */
typedef uint32_t	BMDTimecodeFlags;
enum {
	bmdTimecodeFlagDefault			= 0,
	bmdTimecodeFlagDropFrame		= 1 << 0
};

/* Binary Coded Decimal (BCD) Timecode - hhmmssff */
typedef uint32_t	BMDTimecodeBCD;

// IDeckLinkTimecode.  Used for video frame timecode representation.
class IDeckLinkTimecode : public IUnknown
{
public:
	virtual BMDTimecodeBCD STDMETHODCALLTYPE	GetBCD () = 0;
	virtual HRESULT STDMETHODCALLTYPE			GetComponents (uint8_t *hours, uint8_t *minutes, uint8_t *seconds, uint8_t *frames) = 0;
	virtual HRESULT STDMETHODCALLTYPE			GetString (const char* *timecode) = 0;
	virtual BMDTimecodeFlags STDMETHODCALLTYPE	GetFlags () = 0;
	
	virtual										~IDeckLinkTimecode () {}
};


// IDeckLinkVideoFrame.  Created by IDeckLinkOutput::CreateVideoFrame.
class IDeckLinkVideoFrame : public IUnknown
{
public:
	virtual long STDMETHODCALLTYPE				GetWidth () = 0;
	virtual long STDMETHODCALLTYPE				GetHeight () = 0;
	virtual long STDMETHODCALLTYPE				GetRowBytes () = 0;
	virtual BMDPixelFormat STDMETHODCALLTYPE	GetPixelFormat () = 0;
	virtual BMDFrameFlags STDMETHODCALLTYPE		GetFlags () = 0;
	virtual HRESULT STDMETHODCALLTYPE			GetBytes (void* *buffer) = 0;
};


// IDeckLinkVideoInputFrame.  Provided by the IDeckLinkVideoInput frame arrival callback.
class IDeckLinkVideoInputFrame : public IDeckLinkVideoFrame
{
public:
	virtual HRESULT STDMETHODCALLTYPE			GetStreamTime (BMDTimeValue *frameTime, BMDTimeValue *frameDuration, BMDTimeScale timeScale) = 0;

	virtual										~IDeckLinkVideoInputFrame () {}
};

// IDeckLinkVideoFrameAncillary.  Obtained through QueryInterface() on an IDeckLinkVideoFrame object.
class IDeckLinkVideoFrameAncillary : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE			GetTimecode (BMDTimecodeFormat format, IDeckLinkTimecode* *timecode) = 0;
	virtual HRESULT STDMETHODCALLTYPE			SetTimecode (BMDTimecodeFormat format, IDeckLinkTimecode* timecode) = 0;
	virtual HRESULT STDMETHODCALLTYPE			SetTimecodeFromComponents (BMDTimecodeFormat format, uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t frames, BMDTimecodeFlags flags) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE			GetBufferForVerticalBlankingLine (uint32_t lineNumber, void* *buffer) = 0;
	
	virtual										~IDeckLinkVideoFrameAncillary () {}
};

// IDeckLinkScreenPreviewCallback.
class IDeckLinkScreenPreviewCallback : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE			DrawFrame (IDeckLinkVideoFrame* theFrame) = 0;
	
	virtual										~IDeckLinkScreenPreviewCallback () {}
};

// IDeckLinkGLScreenPreviewHelper.  Created by CreateOpenGLScreenPreview().
class IDeckLinkGLScreenPreviewHelper : public IUnknown
{
public:
	// These methods must be called with the OpenGL context set
	virtual HRESULT STDMETHODCALLTYPE			InitializeGL () = 0;
	virtual HRESULT STDMETHODCALLTYPE			PaintGL () = 0;
	virtual HRESULT STDMETHODCALLTYPE			SetFrame (IDeckLinkVideoFrame* theFrame) = 0;
	
	virtual										~IDeckLinkGLScreenPreviewHelper () {}
};


/*******************************************************************************************************************
 ***************************************************** DeckLink Audio **********************************************
 *******************************************************************************************************************/

// IDeckLinkAudioInputPacket.  Provided by the IDeckLinkInput callback.
class IDeckLinkAudioInputPacket : public IUnknown
{
public:
	virtual long STDMETHODCALLTYPE					GetSampleFrameCount () = 0;
	virtual HRESULT STDMETHODCALLTYPE				GetBytes (void* *buffer) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE				GetPacketTime (BMDTimeValue *packetTime, BMDTimeScale timeScale) = 0;

	virtual											~IDeckLinkAudioInputPacket () {}
};


/*******************************************************************************************************************
 ************************************************* DeckLink Configuration ******************************************
 *******************************************************************************************************************/

typedef uint32_t	BMDVideoConnection;
enum {
	bmdVideoConnectionSDI			= 'sdi ',
	bmdVideoConnectionHDMI			= 'hdmi',
	bmdVideoConnectionOpticalSDI	= 'opti',
	bmdVideoConnectionComponent		= 'cpnt',
	bmdVideoConnectionComposite		= 'cmst',
	bmdVideoConnectionSVideo		= 'svid'
};

typedef uint32_t	BMDAnalogVideoFlags;
enum {
	bmdAnalogVideoFlagCompositeSetup75			= 1 << 0,
	bmdAnalogVideoFlagComponentBetacamLevels	= 1 << 1
};

typedef uint32_t	BMDAudioConnection;
enum {
	bmdAudioConnectionEmbedded	= 'embd',
	bmdAudioConnectionAESEBU	= 'aes ',
	bmdAudioConnectionAnalog	= 'anlg'
};

typedef uint32_t	BMDVideoOutputConversionMode;
enum {
	bmdNoVideoOutputConversion							= 'none',
	bmdVideoOutputLetterboxDownonversion				= 'ltbx',
	bmdVideoOutputAnamorphicDownonversion				= 'amph',
	bmdVideoOutputHD720toHD1080Conversion				= '720c',
	bmdVideoOutputHardwareLetterboxDownconversion		= 'HWlb',
	bmdVideoOutputHardwareAnamorphicDownconversion		= 'HWam',
	bmdVideoOutputHardwareCenterCutDownconversion		= 'HWcc'
};

typedef uint32_t	BMDVideoInputConversionMode;
enum {
	bmdNoVideoInputConversion							= 'none',
	bmdVideoInputLetterboxDownconversionFromHD1080		= '10lb',
	bmdVideoInputAnamorphicDownconversionFromHD1080		= '10am',
	bmdVideoInputLetterboxDownconversionFromHD720		= '72lb',
	bmdVideoInputAnamorphicDownconversionFromHD720		= '72am',
	bmdVideoInputLetterboxUpconversion					= 'lbup',
	bmdVideoInputAnamorphicUpconversion					= 'amup'
};


// IDeckLinkConfiguration.  Created by QueryInterface from IDeckLink.
class IDeckLinkConfiguration : public IUnknown
{
public:
	virtual HRESULT STDMETHODCALLTYPE	GetConfigurationValidator (IDeckLinkConfiguration** configObject) = 0;
	virtual HRESULT STDMETHODCALLTYPE	WriteConfigurationToPreferences () = 0;
	
	// Video output configuration
	virtual HRESULT STDMETHODCALLTYPE	SetVideoOutputFormat (BMDVideoConnection videoOutputConnection) = 0;
	virtual HRESULT STDMETHODCALLTYPE	IsVideoOutputActive (BMDVideoConnection videoOutputConnection, bool *active) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetAnalogVideoOutputFlags (BMDAnalogVideoFlags analogVideoFlags) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetAnalogVideoOutputFlags (BMDAnalogVideoFlags *analogVideoFlags) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	EnableFieldFlickerRemovalWhenPaused (bool enable) = 0;
	virtual HRESULT STDMETHODCALLTYPE	IsEnabledFieldFlickerRemovalWhenPaused (bool *enabled) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetDualLinkVideoOutput (bool enableDualLinkOutput, bool enable3GbsOutput) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetDualLinkVideoOutput (bool *dualLinkOutputEnabled, bool *threeGbsOutputEnabled) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetVideoOutputConversionMode (BMDVideoOutputConversionMode conversionMode) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetVideoOutputConversionMode (BMDVideoOutputConversionMode *conversionMode) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	Set_HD1080p24_to_HD1080i5994_Conversion (bool enable) = 0;
	virtual HRESULT STDMETHODCALLTYPE	Get_HD1080p24_to_HD1080i5994_Conversion (bool *enabled) = 0;
	
	
	// Video input configuration
	virtual HRESULT STDMETHODCALLTYPE	SetVideoInputFormat (BMDVideoConnection videoInputFormat) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetVideoInputFormat (BMDVideoConnection *videoInputFormat) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetAnalogVideoInputFlags (BMDAnalogVideoFlags analogVideoFlags) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetAnalogVideoInputFlags (BMDAnalogVideoFlags *analogVideoFlags) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetVideoInputConversionMode (BMDVideoInputConversionMode conversionMode) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetVideoInputConversionMode (BMDVideoInputConversionMode *conversionMode) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetBlackVideoOutputDuringCapture (bool blackOutInCapture) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetBlackVideoOutputDuringCapture (bool *blackOutInCapture) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	Set32PulldownSequenceInitialTimecodeFrame (uint32_t aFrameTimecode) = 0;
	virtual HRESULT STDMETHODCALLTYPE	Get32PulldownSequenceInitialTimecodeFrame (uint32_t *aFrameTimecode) = 0;
	
	virtual HRESULT STDMETHODCALLTYPE	SetVancSourceLineMapping (uint32_t activeLine1VANCsource, uint32_t activeLine2VANCsource, uint32_t activeLine3VANCsource) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetVancSourceLineMapping (uint32_t *activeLine1VANCsource, uint32_t *activeLine2VANCsource, uint32_t *activeLine3VANCsource) = 0;
	
	
	// Audio input configuration
	virtual HRESULT STDMETHODCALLTYPE	SetAudioInputFormat (BMDAudioConnection audioInputFormat) = 0;
	virtual HRESULT STDMETHODCALLTYPE	GetAudioInputFormat (BMDAudioConnection *audioInputFormat) = 0;
};


extern "C" {
	// Function for create an IDeckLinkIterator instance
	IDeckLinkIterator*				CreateDeckLinkIteratorInstance (void);
	
	IDeckLinkGLScreenPreviewHelper*	CreateOpenGLScreenPreview (void);
};


#endif		// defined(__cplusplus)

#endif		// __DeckLink_API_h__

